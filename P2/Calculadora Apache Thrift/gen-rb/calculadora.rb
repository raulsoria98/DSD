#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'calculadora_types.rb'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def sumar(num1, num2)
      send_sumar(num1, num2)
      return recv_sumar()
    end

    def send_sumar(num1, num2)
      send_message('sumar', Sumar_args, :num1 => num1, :num2 => num2)
    end

    def recv_sumar()
      result = receive_message(Sumar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumar failed: unknown result')
    end

    def restar(num1, num2)
      send_restar(num1, num2)
      return recv_restar()
    end

    def send_restar(num1, num2)
      send_message('restar', Restar_args, :num1 => num1, :num2 => num2)
    end

    def recv_restar()
      result = receive_message(Restar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restar failed: unknown result')
    end

    def multiplicar(num1, num2)
      send_multiplicar(num1, num2)
      return recv_multiplicar()
    end

    def send_multiplicar(num1, num2)
      send_message('multiplicar', Multiplicar_args, :num1 => num1, :num2 => num2)
    end

    def recv_multiplicar()
      result = receive_message(Multiplicar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicar failed: unknown result')
    end

    def dividir(num1, num2)
      send_dividir(num1, num2)
      return recv_dividir()
    end

    def send_dividir(num1, num2)
      send_message('dividir', Dividir_args, :num1 => num1, :num2 => num2)
    end

    def recv_dividir()
      result = receive_message(Dividir_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'dividir failed: unknown result')
    end

    def escalar2d(v1, v2)
      send_escalar2d(v1, v2)
      return recv_escalar2d()
    end

    def send_escalar2d(v1, v2)
      send_message('escalar2d', Escalar2d_args, :v1 => v1, :v2 => v2)
    end

    def recv_escalar2d()
      result = receive_message(Escalar2d_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'escalar2d failed: unknown result')
    end

    def vectorial2d(v1, v2)
      send_vectorial2d(v1, v2)
      return recv_vectorial2d()
    end

    def send_vectorial2d(v1, v2)
      send_message('vectorial2d', Vectorial2d_args, :v1 => v1, :v2 => v2)
    end

    def recv_vectorial2d()
      result = receive_message(Vectorial2d_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'vectorial2d failed: unknown result')
    end

    def escalar3d(v1, v2)
      send_escalar3d(v1, v2)
      return recv_escalar3d()
    end

    def send_escalar3d(v1, v2)
      send_message('escalar3d', Escalar3d_args, :v1 => v1, :v2 => v2)
    end

    def recv_escalar3d()
      result = receive_message(Escalar3d_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'escalar3d failed: unknown result')
    end

    def vectorial3d(v1, v2)
      send_vectorial3d(v1, v2)
      return recv_vectorial3d()
    end

    def send_vectorial3d(v1, v2)
      send_message('vectorial3d', Vectorial3d_args, :v1 => v1, :v2 => v2)
    end

    def recv_vectorial3d()
      result = receive_message(Vectorial3d_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'vectorial3d failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_sumar(seqid, iprot, oprot)
      args = read_args(iprot, Sumar_args)
      result = Sumar_result.new()
      result.success = @handler.sumar(args.num1, args.num2)
      write_result(result, oprot, 'sumar', seqid)
    end

    def process_restar(seqid, iprot, oprot)
      args = read_args(iprot, Restar_args)
      result = Restar_result.new()
      result.success = @handler.restar(args.num1, args.num2)
      write_result(result, oprot, 'restar', seqid)
    end

    def process_multiplicar(seqid, iprot, oprot)
      args = read_args(iprot, Multiplicar_args)
      result = Multiplicar_result.new()
      result.success = @handler.multiplicar(args.num1, args.num2)
      write_result(result, oprot, 'multiplicar', seqid)
    end

    def process_dividir(seqid, iprot, oprot)
      args = read_args(iprot, Dividir_args)
      result = Dividir_result.new()
      result.success = @handler.dividir(args.num1, args.num2)
      write_result(result, oprot, 'dividir', seqid)
    end

    def process_escalar2d(seqid, iprot, oprot)
      args = read_args(iprot, Escalar2d_args)
      result = Escalar2d_result.new()
      result.success = @handler.escalar2d(args.v1, args.v2)
      write_result(result, oprot, 'escalar2d', seqid)
    end

    def process_vectorial2d(seqid, iprot, oprot)
      args = read_args(iprot, Vectorial2d_args)
      result = Vectorial2d_result.new()
      result.success = @handler.vectorial2d(args.v1, args.v2)
      write_result(result, oprot, 'vectorial2d', seqid)
    end

    def process_escalar3d(seqid, iprot, oprot)
      args = read_args(iprot, Escalar3d_args)
      result = Escalar3d_result.new()
      result.success = @handler.escalar3d(args.v1, args.v2)
      write_result(result, oprot, 'escalar3d', seqid)
    end

    def process_vectorial3d(seqid, iprot, oprot)
      args = read_args(iprot, Vectorial3d_args)
      result = Vectorial3d_result.new()
      result.success = @handler.vectorial3d(args.v1, args.v2)
      write_result(result, oprot, 'vectorial3d', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sumar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sumar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Restar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Restar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Dividir_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Dividir_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Escalar2d_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::STRUCT, :name => 'v1', :class => ::Vect2D},
      V2 => {:type => ::Thrift::Types::STRUCT, :name => 'v2', :class => ::Vect2D}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Escalar2d_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Vectorial2d_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::STRUCT, :name => 'v1', :class => ::Vect2D},
      V2 => {:type => ::Thrift::Types::STRUCT, :name => 'v2', :class => ::Vect2D}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Vectorial2d_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Escalar3d_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::STRUCT, :name => 'v1', :class => ::Vect3D},
      V2 => {:type => ::Thrift::Types::STRUCT, :name => 'v2', :class => ::Vect3D}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Escalar3d_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Vectorial3d_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::STRUCT, :name => 'v1', :class => ::Vect3D},
      V2 => {:type => ::Thrift::Types::STRUCT, :name => 'v2', :class => ::Vect3D}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Vectorial3d_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Vect3D}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

